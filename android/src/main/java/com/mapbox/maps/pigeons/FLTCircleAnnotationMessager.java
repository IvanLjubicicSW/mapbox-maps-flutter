// Autogenerated from Pigeon (v11.0.1), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package com.mapbox.maps.pigeons;

import android.util.Log;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import io.flutter.plugin.common.BasicMessageChannel;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.MessageCodec;
import io.flutter.plugin.common.StandardMessageCodec;
import java.io.ByteArrayOutputStream;
import java.nio.ByteBuffer;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/** Generated class from Pigeon. */
@SuppressWarnings({"unused", "unchecked", "CodeBlock2Expr", "RedundantSuppression", "serial"})
public class FLTCircleAnnotationMessager {

  /** Error class for passing custom error details to Flutter via a thrown PlatformException. */
  public static class FlutterError extends RuntimeException {

    /** The error code. */
    public final String code;

    /** The error details. Must be a datatype supported by the api codec. */
    public final Object details;

    public FlutterError(@NonNull String code, @Nullable String message, @Nullable Object details) 
    {
      super(message);
      this.code = code;
      this.details = details;
    }
  }

  @NonNull
  protected static ArrayList<Object> wrapError(@NonNull Throwable exception) {
    ArrayList<Object> errorList = new ArrayList<Object>(3);
    if (exception instanceof FlutterError) {
      FlutterError error = (FlutterError) exception;
      errorList.add(error.code);
      errorList.add(error.getMessage());
      errorList.add(error.details);
    } else {
      errorList.add(exception.toString());
      errorList.add(exception.getClass().getSimpleName());
      errorList.add(
        "Cause: " + exception.getCause() + ", Stacktrace: " + Log.getStackTraceString(exception));
    }
    return errorList;
  }

  /** Orientation of circle when map is pitched. */
  public enum CirclePitchAlignment {
    /** The circle is aligned to the plane of the map. */
    MAP(0),
    /** The circle is aligned to the plane of the viewport. */
    VIEWPORT(1);

    final int index;

    private CirclePitchAlignment(final int index) {
      this.index = index;
    }
  }

  /** Controls the scaling behavior of the circle when the map is pitched. */
  public enum CirclePitchScale {
    /** Circles are scaled according to their apparent distance to the camera. */
    MAP(0),
    /** Circles are not scaled. */
    VIEWPORT(1);

    final int index;

    private CirclePitchScale(final int index) {
      this.index = index;
    }
  }

  /** Controls the frame of reference for `circle-translate`. */
  public enum CircleTranslateAnchor {
    /** The circle is translated relative to the map. */
    MAP(0),
    /** The circle is translated relative to the viewport. */
    VIEWPORT(1);

    final int index;

    private CircleTranslateAnchor(final int index) {
      this.index = index;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class CircleAnnotation {
    /** The id for annotation */
    private @NonNull String id;

    public @NonNull String getId() {
      return id;
    }

    public void setId(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"id\" is null.");
      }
      this.id = setterArg;
    }

    /** The geometry that determines the location/shape of this annotation */
    private @Nullable Map<String, Object> geometry;

    public @Nullable Map<String, Object> getGeometry() {
      return geometry;
    }

    public void setGeometry(@Nullable Map<String, Object> setterArg) {
      this.geometry = setterArg;
    }

    /** Sorts features in ascending order based on this value. Features with a higher sort key will appear above features with a lower sort key. */
    private @Nullable Double circleSortKey;

    public @Nullable Double getCircleSortKey() {
      return circleSortKey;
    }

    public void setCircleSortKey(@Nullable Double setterArg) {
      this.circleSortKey = setterArg;
    }

    /** Amount to blur the circle. 1 blurs the circle such that only the centerpoint is full opacity. */
    private @Nullable Double circleBlur;

    public @Nullable Double getCircleBlur() {
      return circleBlur;
    }

    public void setCircleBlur(@Nullable Double setterArg) {
      this.circleBlur = setterArg;
    }

    /** The fill color of the circle. */
    private @Nullable Long circleColor;

    public @Nullable Long getCircleColor() {
      return circleColor;
    }

    public void setCircleColor(@Nullable Long setterArg) {
      this.circleColor = setterArg;
    }

    /** The opacity at which the circle will be drawn. */
    private @Nullable Double circleOpacity;

    public @Nullable Double getCircleOpacity() {
      return circleOpacity;
    }

    public void setCircleOpacity(@Nullable Double setterArg) {
      this.circleOpacity = setterArg;
    }

    /** Circle radius. */
    private @Nullable Double circleRadius;

    public @Nullable Double getCircleRadius() {
      return circleRadius;
    }

    public void setCircleRadius(@Nullable Double setterArg) {
      this.circleRadius = setterArg;
    }

    /** The stroke color of the circle. */
    private @Nullable Long circleStrokeColor;

    public @Nullable Long getCircleStrokeColor() {
      return circleStrokeColor;
    }

    public void setCircleStrokeColor(@Nullable Long setterArg) {
      this.circleStrokeColor = setterArg;
    }

    /** The opacity of the circle's stroke. */
    private @Nullable Double circleStrokeOpacity;

    public @Nullable Double getCircleStrokeOpacity() {
      return circleStrokeOpacity;
    }

    public void setCircleStrokeOpacity(@Nullable Double setterArg) {
      this.circleStrokeOpacity = setterArg;
    }

    /** The width of the circle's stroke. Strokes are placed outside of the `circle-radius`. */
    private @Nullable Double circleStrokeWidth;

    public @Nullable Double getCircleStrokeWidth() {
      return circleStrokeWidth;
    }

    public void setCircleStrokeWidth(@Nullable Double setterArg) {
      this.circleStrokeWidth = setterArg;
    }

    /** Constructor is non-public to enforce null safety; use Builder. */
    CircleAnnotation() {}

    public static final class Builder {

      private @Nullable String id;

      public @NonNull Builder setId(@NonNull String setterArg) {
        this.id = setterArg;
        return this;
      }

      private @Nullable Map<String, Object> geometry;

      public @NonNull Builder setGeometry(@Nullable Map<String, Object> setterArg) {
        this.geometry = setterArg;
        return this;
      }

      private @Nullable Double circleSortKey;

      public @NonNull Builder setCircleSortKey(@Nullable Double setterArg) {
        this.circleSortKey = setterArg;
        return this;
      }

      private @Nullable Double circleBlur;

      public @NonNull Builder setCircleBlur(@Nullable Double setterArg) {
        this.circleBlur = setterArg;
        return this;
      }

      private @Nullable Long circleColor;

      public @NonNull Builder setCircleColor(@Nullable Long setterArg) {
        this.circleColor = setterArg;
        return this;
      }

      private @Nullable Double circleOpacity;

      public @NonNull Builder setCircleOpacity(@Nullable Double setterArg) {
        this.circleOpacity = setterArg;
        return this;
      }

      private @Nullable Double circleRadius;

      public @NonNull Builder setCircleRadius(@Nullable Double setterArg) {
        this.circleRadius = setterArg;
        return this;
      }

      private @Nullable Long circleStrokeColor;

      public @NonNull Builder setCircleStrokeColor(@Nullable Long setterArg) {
        this.circleStrokeColor = setterArg;
        return this;
      }

      private @Nullable Double circleStrokeOpacity;

      public @NonNull Builder setCircleStrokeOpacity(@Nullable Double setterArg) {
        this.circleStrokeOpacity = setterArg;
        return this;
      }

      private @Nullable Double circleStrokeWidth;

      public @NonNull Builder setCircleStrokeWidth(@Nullable Double setterArg) {
        this.circleStrokeWidth = setterArg;
        return this;
      }

      public @NonNull CircleAnnotation build() {
        CircleAnnotation pigeonReturn = new CircleAnnotation();
        pigeonReturn.setId(id);
        pigeonReturn.setGeometry(geometry);
        pigeonReturn.setCircleSortKey(circleSortKey);
        pigeonReturn.setCircleBlur(circleBlur);
        pigeonReturn.setCircleColor(circleColor);
        pigeonReturn.setCircleOpacity(circleOpacity);
        pigeonReturn.setCircleRadius(circleRadius);
        pigeonReturn.setCircleStrokeColor(circleStrokeColor);
        pigeonReturn.setCircleStrokeOpacity(circleStrokeOpacity);
        pigeonReturn.setCircleStrokeWidth(circleStrokeWidth);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(10);
      toListResult.add(id);
      toListResult.add(geometry);
      toListResult.add(circleSortKey);
      toListResult.add(circleBlur);
      toListResult.add(circleColor);
      toListResult.add(circleOpacity);
      toListResult.add(circleRadius);
      toListResult.add(circleStrokeColor);
      toListResult.add(circleStrokeOpacity);
      toListResult.add(circleStrokeWidth);
      return toListResult;
    }

    static @NonNull CircleAnnotation fromList(@NonNull ArrayList<Object> list) {
      CircleAnnotation pigeonResult = new CircleAnnotation();
      Object id = list.get(0);
      pigeonResult.setId((String) id);
      Object geometry = list.get(1);
      pigeonResult.setGeometry((Map<String, Object>) geometry);
      Object circleSortKey = list.get(2);
      pigeonResult.setCircleSortKey((Double) circleSortKey);
      Object circleBlur = list.get(3);
      pigeonResult.setCircleBlur((Double) circleBlur);
      Object circleColor = list.get(4);
      pigeonResult.setCircleColor((circleColor == null) ? null : ((circleColor instanceof Integer) ? (Integer) circleColor : (Long) circleColor));
      Object circleOpacity = list.get(5);
      pigeonResult.setCircleOpacity((Double) circleOpacity);
      Object circleRadius = list.get(6);
      pigeonResult.setCircleRadius((Double) circleRadius);
      Object circleStrokeColor = list.get(7);
      pigeonResult.setCircleStrokeColor((circleStrokeColor == null) ? null : ((circleStrokeColor instanceof Integer) ? (Integer) circleStrokeColor : (Long) circleStrokeColor));
      Object circleStrokeOpacity = list.get(8);
      pigeonResult.setCircleStrokeOpacity((Double) circleStrokeOpacity);
      Object circleStrokeWidth = list.get(9);
      pigeonResult.setCircleStrokeWidth((Double) circleStrokeWidth);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class CircleAnnotationOptions {
    /** The geometry that determines the location/shape of this annotation */
    private @Nullable Map<String, Object> geometry;

    public @Nullable Map<String, Object> getGeometry() {
      return geometry;
    }

    public void setGeometry(@Nullable Map<String, Object> setterArg) {
      this.geometry = setterArg;
    }

    /** Sorts features in ascending order based on this value. Features with a higher sort key will appear above features with a lower sort key. */
    private @Nullable Double circleSortKey;

    public @Nullable Double getCircleSortKey() {
      return circleSortKey;
    }

    public void setCircleSortKey(@Nullable Double setterArg) {
      this.circleSortKey = setterArg;
    }

    /** Amount to blur the circle. 1 blurs the circle such that only the centerpoint is full opacity. */
    private @Nullable Double circleBlur;

    public @Nullable Double getCircleBlur() {
      return circleBlur;
    }

    public void setCircleBlur(@Nullable Double setterArg) {
      this.circleBlur = setterArg;
    }

    /** The fill color of the circle. */
    private @Nullable Long circleColor;

    public @Nullable Long getCircleColor() {
      return circleColor;
    }

    public void setCircleColor(@Nullable Long setterArg) {
      this.circleColor = setterArg;
    }

    /** The opacity at which the circle will be drawn. */
    private @Nullable Double circleOpacity;

    public @Nullable Double getCircleOpacity() {
      return circleOpacity;
    }

    public void setCircleOpacity(@Nullable Double setterArg) {
      this.circleOpacity = setterArg;
    }

    /** Circle radius. */
    private @Nullable Double circleRadius;

    public @Nullable Double getCircleRadius() {
      return circleRadius;
    }

    public void setCircleRadius(@Nullable Double setterArg) {
      this.circleRadius = setterArg;
    }

    /** The stroke color of the circle. */
    private @Nullable Long circleStrokeColor;

    public @Nullable Long getCircleStrokeColor() {
      return circleStrokeColor;
    }

    public void setCircleStrokeColor(@Nullable Long setterArg) {
      this.circleStrokeColor = setterArg;
    }

    /** The opacity of the circle's stroke. */
    private @Nullable Double circleStrokeOpacity;

    public @Nullable Double getCircleStrokeOpacity() {
      return circleStrokeOpacity;
    }

    public void setCircleStrokeOpacity(@Nullable Double setterArg) {
      this.circleStrokeOpacity = setterArg;
    }

    /** The width of the circle's stroke. Strokes are placed outside of the `circle-radius`. */
    private @Nullable Double circleStrokeWidth;

    public @Nullable Double getCircleStrokeWidth() {
      return circleStrokeWidth;
    }

    public void setCircleStrokeWidth(@Nullable Double setterArg) {
      this.circleStrokeWidth = setterArg;
    }

    public static final class Builder {

      private @Nullable Map<String, Object> geometry;

      public @NonNull Builder setGeometry(@Nullable Map<String, Object> setterArg) {
        this.geometry = setterArg;
        return this;
      }

      private @Nullable Double circleSortKey;

      public @NonNull Builder setCircleSortKey(@Nullable Double setterArg) {
        this.circleSortKey = setterArg;
        return this;
      }

      private @Nullable Double circleBlur;

      public @NonNull Builder setCircleBlur(@Nullable Double setterArg) {
        this.circleBlur = setterArg;
        return this;
      }

      private @Nullable Long circleColor;

      public @NonNull Builder setCircleColor(@Nullable Long setterArg) {
        this.circleColor = setterArg;
        return this;
      }

      private @Nullable Double circleOpacity;

      public @NonNull Builder setCircleOpacity(@Nullable Double setterArg) {
        this.circleOpacity = setterArg;
        return this;
      }

      private @Nullable Double circleRadius;

      public @NonNull Builder setCircleRadius(@Nullable Double setterArg) {
        this.circleRadius = setterArg;
        return this;
      }

      private @Nullable Long circleStrokeColor;

      public @NonNull Builder setCircleStrokeColor(@Nullable Long setterArg) {
        this.circleStrokeColor = setterArg;
        return this;
      }

      private @Nullable Double circleStrokeOpacity;

      public @NonNull Builder setCircleStrokeOpacity(@Nullable Double setterArg) {
        this.circleStrokeOpacity = setterArg;
        return this;
      }

      private @Nullable Double circleStrokeWidth;

      public @NonNull Builder setCircleStrokeWidth(@Nullable Double setterArg) {
        this.circleStrokeWidth = setterArg;
        return this;
      }

      public @NonNull CircleAnnotationOptions build() {
        CircleAnnotationOptions pigeonReturn = new CircleAnnotationOptions();
        pigeonReturn.setGeometry(geometry);
        pigeonReturn.setCircleSortKey(circleSortKey);
        pigeonReturn.setCircleBlur(circleBlur);
        pigeonReturn.setCircleColor(circleColor);
        pigeonReturn.setCircleOpacity(circleOpacity);
        pigeonReturn.setCircleRadius(circleRadius);
        pigeonReturn.setCircleStrokeColor(circleStrokeColor);
        pigeonReturn.setCircleStrokeOpacity(circleStrokeOpacity);
        pigeonReturn.setCircleStrokeWidth(circleStrokeWidth);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(9);
      toListResult.add(geometry);
      toListResult.add(circleSortKey);
      toListResult.add(circleBlur);
      toListResult.add(circleColor);
      toListResult.add(circleOpacity);
      toListResult.add(circleRadius);
      toListResult.add(circleStrokeColor);
      toListResult.add(circleStrokeOpacity);
      toListResult.add(circleStrokeWidth);
      return toListResult;
    }

    static @NonNull CircleAnnotationOptions fromList(@NonNull ArrayList<Object> list) {
      CircleAnnotationOptions pigeonResult = new CircleAnnotationOptions();
      Object geometry = list.get(0);
      pigeonResult.setGeometry((Map<String, Object>) geometry);
      Object circleSortKey = list.get(1);
      pigeonResult.setCircleSortKey((Double) circleSortKey);
      Object circleBlur = list.get(2);
      pigeonResult.setCircleBlur((Double) circleBlur);
      Object circleColor = list.get(3);
      pigeonResult.setCircleColor((circleColor == null) ? null : ((circleColor instanceof Integer) ? (Integer) circleColor : (Long) circleColor));
      Object circleOpacity = list.get(4);
      pigeonResult.setCircleOpacity((Double) circleOpacity);
      Object circleRadius = list.get(5);
      pigeonResult.setCircleRadius((Double) circleRadius);
      Object circleStrokeColor = list.get(6);
      pigeonResult.setCircleStrokeColor((circleStrokeColor == null) ? null : ((circleStrokeColor instanceof Integer) ? (Integer) circleStrokeColor : (Long) circleStrokeColor));
      Object circleStrokeOpacity = list.get(7);
      pigeonResult.setCircleStrokeOpacity((Double) circleStrokeOpacity);
      Object circleStrokeWidth = list.get(8);
      pigeonResult.setCircleStrokeWidth((Double) circleStrokeWidth);
      return pigeonResult;
    }
  }

  public interface Result<T> {
    @SuppressWarnings("UnknownNullness")
    void success(T result);

    void error(@NonNull Throwable error);
  }

  private static class OnCircleAnnotationClickListenerCodec extends StandardMessageCodec {
    public static final OnCircleAnnotationClickListenerCodec INSTANCE = new OnCircleAnnotationClickListenerCodec();

    private OnCircleAnnotationClickListenerCodec() {}

    @Override
    protected Object readValueOfType(byte type, @NonNull ByteBuffer buffer) {
      switch (type) {
        case (byte) 128:
          return CircleAnnotation.fromList((ArrayList<Object>) readValue(buffer));
        default:
          return super.readValueOfType(type, buffer);
      }
    }

    @Override
    protected void writeValue(@NonNull ByteArrayOutputStream stream, Object value) {
      if (value instanceof CircleAnnotation) {
        stream.write(128);
        writeValue(stream, ((CircleAnnotation) value).toList());
      } else {
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated class from Pigeon that represents Flutter messages that can be called from Java. */
  public static class OnCircleAnnotationClickListener {
    private final @NonNull BinaryMessenger binaryMessenger;

    public OnCircleAnnotationClickListener(@NonNull BinaryMessenger argBinaryMessenger) {
      this.binaryMessenger = argBinaryMessenger;
    }

    /** Public interface for sending reply. */ 
    @SuppressWarnings("UnknownNullness")
    public interface Reply<T> {
      void reply(T reply);
    }
    /** The codec used by OnCircleAnnotationClickListener. */
    static @NonNull MessageCodec<Object> getCodec() {
      return OnCircleAnnotationClickListenerCodec.INSTANCE;
    }
    public void onCircleAnnotationClick(@NonNull CircleAnnotation annotationArg, @NonNull Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(
              binaryMessenger, "dev.flutter.pigeon.mapbox_maps_flutter.OnCircleAnnotationClickListener.onCircleAnnotationClick", getCodec());
      channel.send(
          new ArrayList<Object>(Collections.singletonList(annotationArg)),
          channelReply -> callback.reply(null));
    }
  }

  private static class _CircleAnnotationMessagerCodec extends StandardMessageCodec {
    public static final _CircleAnnotationMessagerCodec INSTANCE = new _CircleAnnotationMessagerCodec();

    private _CircleAnnotationMessagerCodec() {}

    @Override
    protected Object readValueOfType(byte type, @NonNull ByteBuffer buffer) {
      switch (type) {
        case (byte) 128:
          return CircleAnnotation.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 129:
          return CircleAnnotationOptions.fromList((ArrayList<Object>) readValue(buffer));
        default:
          return super.readValueOfType(type, buffer);
      }
    }

    @Override
    protected void writeValue(@NonNull ByteArrayOutputStream stream, Object value) {
      if (value instanceof CircleAnnotation) {
        stream.write(128);
        writeValue(stream, ((CircleAnnotation) value).toList());
      } else if (value instanceof CircleAnnotationOptions) {
        stream.write(129);
        writeValue(stream, ((CircleAnnotationOptions) value).toList());
      } else {
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter. */
  public interface _CircleAnnotationMessager {

    void create(@NonNull String managerId, @NonNull CircleAnnotationOptions annotationOption, @NonNull Result<CircleAnnotation> result);

    void createMulti(@NonNull String managerId, @NonNull List<CircleAnnotationOptions> annotationOptions, @NonNull Result<List<CircleAnnotation>> result);

    void update(@NonNull String managerId, @NonNull CircleAnnotation annotation, @NonNull Result<Void> result);

    void delete(@NonNull String managerId, @NonNull CircleAnnotation annotation, @NonNull Result<Void> result);

    void deleteAll(@NonNull String managerId, @NonNull Result<Void> result);

    void setCircleEmissiveStrength(@NonNull String managerId, @NonNull Double circleEmissiveStrength, @NonNull Result<Void> result);

    void getCircleEmissiveStrength(@NonNull String managerId, @NonNull Result<Double> result);

    void setCirclePitchAlignment(@NonNull String managerId, @NonNull CirclePitchAlignment circlePitchAlignment, @NonNull Result<Void> result);

    void getCirclePitchAlignment(@NonNull String managerId, @NonNull Result<CirclePitchAlignment> result);

    void setCirclePitchScale(@NonNull String managerId, @NonNull CirclePitchScale circlePitchScale, @NonNull Result<Void> result);

    void getCirclePitchScale(@NonNull String managerId, @NonNull Result<CirclePitchScale> result);

    void setCircleTranslate(@NonNull String managerId, @NonNull List<Double> circleTranslate, @NonNull Result<Void> result);

    void getCircleTranslate(@NonNull String managerId, @NonNull Result<List<Double>> result);

    void setCircleTranslateAnchor(@NonNull String managerId, @NonNull CircleTranslateAnchor circleTranslateAnchor, @NonNull Result<Void> result);

    void getCircleTranslateAnchor(@NonNull String managerId, @NonNull Result<CircleTranslateAnchor> result);

    /** The codec used by _CircleAnnotationMessager. */
    static @NonNull MessageCodec<Object> getCodec() {
      return _CircleAnnotationMessagerCodec.INSTANCE;
    }
    /**Sets up an instance of `_CircleAnnotationMessager` to handle messages through the `binaryMessenger`. */
    static void setup(@NonNull BinaryMessenger binaryMessenger, @Nullable _CircleAnnotationMessager api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.mapbox_maps_flutter._CircleAnnotationMessager.create", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String managerIdArg = (String) args.get(0);
                CircleAnnotationOptions annotationOptionArg = (CircleAnnotationOptions) args.get(1);
                Result<CircleAnnotation> resultCallback =
                    new Result<CircleAnnotation>() {
                      public void success(CircleAnnotation result) {
                        wrapped.add(0, result);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.create(managerIdArg, annotationOptionArg, resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.mapbox_maps_flutter._CircleAnnotationMessager.createMulti", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String managerIdArg = (String) args.get(0);
                List<CircleAnnotationOptions> annotationOptionsArg = (List<CircleAnnotationOptions>) args.get(1);
                Result<List<CircleAnnotation>> resultCallback =
                    new Result<List<CircleAnnotation>>() {
                      public void success(List<CircleAnnotation> result) {
                        wrapped.add(0, result);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.createMulti(managerIdArg, annotationOptionsArg, resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.mapbox_maps_flutter._CircleAnnotationMessager.update", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String managerIdArg = (String) args.get(0);
                CircleAnnotation annotationArg = (CircleAnnotation) args.get(1);
                Result<Void> resultCallback =
                    new Result<Void>() {
                      public void success(Void result) {
                        wrapped.add(0, null);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.update(managerIdArg, annotationArg, resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.mapbox_maps_flutter._CircleAnnotationMessager.delete", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String managerIdArg = (String) args.get(0);
                CircleAnnotation annotationArg = (CircleAnnotation) args.get(1);
                Result<Void> resultCallback =
                    new Result<Void>() {
                      public void success(Void result) {
                        wrapped.add(0, null);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.delete(managerIdArg, annotationArg, resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.mapbox_maps_flutter._CircleAnnotationMessager.deleteAll", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String managerIdArg = (String) args.get(0);
                Result<Void> resultCallback =
                    new Result<Void>() {
                      public void success(Void result) {
                        wrapped.add(0, null);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.deleteAll(managerIdArg, resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.mapbox_maps_flutter._CircleAnnotationMessager.setCircleEmissiveStrength", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String managerIdArg = (String) args.get(0);
                Double circleEmissiveStrengthArg = (Double) args.get(1);
                Result<Void> resultCallback =
                    new Result<Void>() {
                      public void success(Void result) {
                        wrapped.add(0, null);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.setCircleEmissiveStrength(managerIdArg, circleEmissiveStrengthArg, resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.mapbox_maps_flutter._CircleAnnotationMessager.getCircleEmissiveStrength", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String managerIdArg = (String) args.get(0);
                Result<Double> resultCallback =
                    new Result<Double>() {
                      public void success(Double result) {
                        wrapped.add(0, result);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.getCircleEmissiveStrength(managerIdArg, resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.mapbox_maps_flutter._CircleAnnotationMessager.setCirclePitchAlignment", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String managerIdArg = (String) args.get(0);
                CirclePitchAlignment circlePitchAlignmentArg = CirclePitchAlignment.values()[(int) args.get(1)];
                Result<Void> resultCallback =
                    new Result<Void>() {
                      public void success(Void result) {
                        wrapped.add(0, null);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.setCirclePitchAlignment(managerIdArg, circlePitchAlignmentArg, resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.mapbox_maps_flutter._CircleAnnotationMessager.getCirclePitchAlignment", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String managerIdArg = (String) args.get(0);
                Result<CirclePitchAlignment> resultCallback =
                    new Result<CirclePitchAlignment>() {
                      public void success(CirclePitchAlignment result) {
                        wrapped.add(0, result == null ? null : result.index);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.getCirclePitchAlignment(managerIdArg, resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.mapbox_maps_flutter._CircleAnnotationMessager.setCirclePitchScale", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String managerIdArg = (String) args.get(0);
                CirclePitchScale circlePitchScaleArg = CirclePitchScale.values()[(int) args.get(1)];
                Result<Void> resultCallback =
                    new Result<Void>() {
                      public void success(Void result) {
                        wrapped.add(0, null);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.setCirclePitchScale(managerIdArg, circlePitchScaleArg, resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.mapbox_maps_flutter._CircleAnnotationMessager.getCirclePitchScale", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String managerIdArg = (String) args.get(0);
                Result<CirclePitchScale> resultCallback =
                    new Result<CirclePitchScale>() {
                      public void success(CirclePitchScale result) {
                        wrapped.add(0, result == null ? null : result.index);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.getCirclePitchScale(managerIdArg, resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.mapbox_maps_flutter._CircleAnnotationMessager.setCircleTranslate", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String managerIdArg = (String) args.get(0);
                List<Double> circleTranslateArg = (List<Double>) args.get(1);
                Result<Void> resultCallback =
                    new Result<Void>() {
                      public void success(Void result) {
                        wrapped.add(0, null);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.setCircleTranslate(managerIdArg, circleTranslateArg, resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.mapbox_maps_flutter._CircleAnnotationMessager.getCircleTranslate", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String managerIdArg = (String) args.get(0);
                Result<List<Double>> resultCallback =
                    new Result<List<Double>>() {
                      public void success(List<Double> result) {
                        wrapped.add(0, result);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.getCircleTranslate(managerIdArg, resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.mapbox_maps_flutter._CircleAnnotationMessager.setCircleTranslateAnchor", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String managerIdArg = (String) args.get(0);
                CircleTranslateAnchor circleTranslateAnchorArg = CircleTranslateAnchor.values()[(int) args.get(1)];
                Result<Void> resultCallback =
                    new Result<Void>() {
                      public void success(Void result) {
                        wrapped.add(0, null);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.setCircleTranslateAnchor(managerIdArg, circleTranslateAnchorArg, resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.mapbox_maps_flutter._CircleAnnotationMessager.getCircleTranslateAnchor", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String managerIdArg = (String) args.get(0);
                Result<CircleTranslateAnchor> resultCallback =
                    new Result<CircleTranslateAnchor>() {
                      public void success(CircleTranslateAnchor result) {
                        wrapped.add(0, result == null ? null : result.index);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.getCircleTranslateAnchor(managerIdArg, resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
}
